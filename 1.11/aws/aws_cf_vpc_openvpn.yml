---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Setup a VPC with public and private subnet, NAT Gateway and Internet Gateway'
# This template creates a VPC with public and private subnet. It creates
# an Internet Gateway attached to the public subnet. And a NAT Gateway for the
# subnet to communicate out.
Parameters:
  name:
    Default: maprinstaller
    Type: String
  publicAccessCIDR:
    Description: Public access CIDR (You would want to restrict this to your corporate IP range)
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  installOpenVPN:
    Description: Install OpenVPN to enable public access to the VPC
    Type: String
    AllowedValues: [true, false]
    Default: true
  keyName:
    Description: AWS key pair used to create openVPN node
    Type: AWS::EC2::KeyPair::KeyName
    AllowedPattern: ".+"
    ConstraintDescription: must select an existing EC2 KeyPair
  openVPNuser:
    Description: OpenVPN login user
    Type: String
    Default: openvpn
  openVPNpassword:
    Description: OpenVPN login user password. Always use a strong password to protect your VPC.
    Type: String
    NoEcho: True
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "VPC Information"
        Parameters:
          - name
          - publicAccessCIDR
      -
        Label:
          default: "OpenVPN"
        Parameters:
          - installOpenVPN
          - openVPNuser
          - openVPNpassword
          - keyName
Conditions:
  InstallOpenVPN: !Equals [!Ref installOpenVPN, true]
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 172.24.0.0/16
    Public:
      CIDR: 172.24.4.0/24
    Private:
      CIDR: 172.24.8.0/22
  OpenVPNAMIMap:
    us-east-1: # N Viriginia
      AMI: ami-43a15f3e
      domain: ec2.internal
    us-east-2: # Ohio
      AMI: ami-916f59f4
      domain: us-east-2.compute.internal
    us-west-1: # California
      AMI: ami-925144f2
      domain: us-west-1.compute.internal
    us-west-2: # Oregon
      AMI: ami-4e79ed36
      domain: us-west-2.compute.internal
    ca-central-1: # Québec
      AMI: ami-ae55d2ca
      domain: ca-central-1.compute.internal
    eu-central-1: # Frankfurt
      AMI: ami-7c412f13
      domain: eu-central-1.compute.internal
    eu-west-1: # Ireland
      AMI: ami-f90a4880
      domain: eu-west-1.compute.internal
    eu-west-2: # London
      AMI: ami-f4f21593
      domain: eu-west-2.compute.internal
    eu-west-3: # Paris
      AMI: ami-0e55e373
      domain: eu-west-3.compute.internal
    ap-southeast-1: # Singapore
      AMI: ami-52d4802e
      domain: ap-southeast-1.compute.internal
    ap-southeast-2: # Sydney
      AMI: ami-d38a4ab1
      domain: ap-southeast-2.compute.internal
    ap-south-1 : # Mumbai
      AMI: ami-0189d76e
      domain: ap-south-1.compute.internal
    ap-northeast-1: # Tokoyo
      AMI: ami-0d74386b
      domain: ap-northeast-1.compute.internal
    ap-northeast-2: # Seoul
      AMI: ami-a414b9ca
      domain: ap-northeast-2.compute.internal
    sa-east-1: # São Paulo
      AMI: ami-423d772e
      domain: sa-east-1.compute.internal
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref name, "vpc"]]
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Public
        - CIDR
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref name, "public"]]
      - Key: Network
        Value: Public
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Private
        - CIDR
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref name, "private"]]
      - Key: Network
        Value: Private
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref name, "ig"]]
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  NATEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATEIP.AllocationId
      SubnetId: !Ref PublicSubnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref name, "public"]]
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value:  !Join ["-", [!Ref name, "internal"]]
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  NATRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  OpenVPNSG:
    Type: AWS::EC2::SecurityGroup
    Condition: InstallOpenVPN
    Properties:
      GroupDescription: "OpenVPN Access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '943'
        ToPort: '943'
        CidrIp: !Ref publicAccessCIDR
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: !Ref publicAccessCIDR
      - IpProtocol: udp
        FromPort: '1194'
        ToPort: '1194'
        CidrIp: !Ref publicAccessCIDR
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Fn::FindInMap:
          - SubnetConfig
          - VPC
          - CIDR
  OpenVPNWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Condition: InstallOpenVPN
  OpenVPNWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Condition: InstallOpenVPN
    DependsOn: VPC
    Properties:
      Handle: !Ref "OpenVPNWaitHandle"
      Timeout: "600"
  OpenVPNInstance:
    Type: AWS::EC2::Instance
    Condition: InstallOpenVPN
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref name, "openvpn"]]
      ImageId:
        Fn::FindInMap:
        - OpenVPNAMIMap
        - Ref: AWS::Region
        - AMI
      KeyName: !Ref keyName
      InstanceType: t2.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeleteOnTermination: "true"
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet
          GroupSet: [!GetAtt VPC.DefaultSecurityGroup, !Ref OpenVPNSG]
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -x
            statusFile=/tmp/cf_status
            status="FAILURE"

            admin_user=${openVPNuser}
            admin_pw=${openVPNpassword}
            if [ -z "${openVPNuser}" -o -z "${openVPNpassword}" ]; then
              message="Openvpn setup requires admin user and password"
              echo "{ \"Status\" : \"FAILURE\", \"UniqueId\" : \"${name}\", \"Data\" : \"$message\", \"Reason\" : \"$message\" }" > $statusFile
              curl -T $statusFile '${OpenVPNWaitHandle}'
              exit 1
            fi

            id $admin_user 2>/dev/null || useradd -m $admin_user
            if [ $? -ne 0 ]; then
              message="Failed to created $admin_user"
              echo "{ \"Status\" : \"FAILURE\", \"UniqueId\" : \"${name}\", \"Data\" : \"$message\", \"Reason\" : \"$message\" }" > $statusFile
              curl -T $statusFile '${OpenVPNWaitHandle}'
              exit 1
            fi
            echo "$admin_user:$admin_pw" | chpasswd


            host_ip=$(curl -f -s http://169.254.169.254/latest/meta-data/public-ipv4)
            if [ $? -ne 0 ]; then
              status="The openvpn host must have a public ip"
              echo "{ \"Status\" : \"FAILURE\", \"UniqueId\" : \"${name}\", \"Data\" : \"$message\", \"Reason\" : \"$message\" }" > $statusFile
              curl -T $statusFile '${OpenVPNWaitHandle}'
              exit 1
            fi

            cd /tmp
            wget -c http://swupdate.openvpn.org/as/openvpn-as-2.5-Ubuntu16.amd_64.deb
            dpkg -i openvpn-as-2.5-Ubuntu16.amd_64.deb
            echo "openvpn:$admin_pw" | chpasswd
            sleep 5

            ip_range=$(echo ${CIDRRange} | cut -d/ -f1)
            netmask=$(echo ${CIDRRange} | cut -d/ -f2)

            /usr/local/openvpn_as/scripts/sacli -k host.name -v $host_ip ConfigPut
            /usr/local/openvpn_as/scripts/sacli -k vpn.server.routing.private_network.0 -v ${addressSpace} ConfigPut
            /usr/local/openvpn_as/scripts/sacli -k vpn.client.tls_version_min -v 1.2 ConfigPut
            /usr/local/openvpn_as/scripts/sacli -k vpn.client.tls_version_min_strict -v true ConfigPut
            /usr/local/openvpn_as/scripts/sacli -k vpn.server.tls_version_min -v 1.2 ConfigPut
            /usr/local/openvpn_as/scripts/sacli -k vpn.daemon.0.client.network -v $ip_range ConfigPut
            /usr/local/openvpn_as/scripts/sacli -k vpn.daemon.0.client.netmask_bits -v $netmask ConfigPut
            /usr/local/openvpn_as/scripts/sacli -k vpn.client.routing.reroute_dns -v true ConfigPut
            /usr/local/openvpn_as/scripts/sacli -k vpn.server.dhcp_option.domain -v ${domain} ConfigPut
            /usr/local/openvpn_as/scripts/sacli --user $admin_user --key prop_superuser --value true UserPropPut
            /usr/local/openvpn_as/scripts/sacli --user $admin_user --new_pass $admin_pw SetLocalPassword
            /usr/local/openvpn_as/scripts/sacli start
            if [ $? -ne 0 ]; then
              message="Openvpn did not start successfully"
            else
              message="Success!"
              status="SUCCESS"
            fi
            # With the VPN server running, the CURL is not able to resolve the AWS host
            /usr/local/openvpn_as/scripts/sacli stop
            sleep 5
            echo "{ \"Status\" : \"$status\", \"UniqueId\" : \"${name}\", \"Data\" : \"$message\", \"Reason\" : \"$message\" }" > $statusFile
            curl -T $statusFile '${OpenVPNWaitHandle}'
            /usr/local/openvpn_as/scripts/sacli start
            /usr/local/openvpn_as/scripts/sacli --user router --key prop_autologin --value true UserPropPut
            systemctl enable openvpnas
          - CIDRRange: !FindInMap [ SubnetConfig, "Public", "CIDR" ]
            addressSpace: !FindInMap [ SubnetConfig, "VPC", "CIDR" ]
            domain: !FindInMap [ OpenVPNAMIMap, !Ref "AWS::Region", "domain" ]
Outputs:
  VPC:
    Value: !Ref VPC
  DefaultSecurityGroup:
    Value: !GetAtt VPC.DefaultSecurityGroup
  PrivateSubnet:
    Value: !Ref PrivateSubnet
  PublicSubnet:
    Value: !Ref PublicSubnet
  OpenVPNIp:
    Condition: InstallOpenVPN
    Description: OpenVPN IP Address.
    Value: !GetAtt OpenVPNInstance.PublicIp
  OpenVPNUrl:
    Condition: InstallOpenVPN
    Description: OpenVPN Admin URL. Login credential openvpn/openvpn.
    Value: !Join [ "", ["https://", !GetAtt OpenVPNInstance.PublicIp, ":943/admin"]]

